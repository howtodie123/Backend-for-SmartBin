name: CI/CD workflow for Maven Build and Sonar Code scan
on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: Backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: excute permission
        run: chmod +x mvnw

      - name: Run Unit Tests
        run: ./mvnw test

  integration-tests:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: unit-tests  
    defaults:
      run:
        shell: bash
        working-directory: Backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: excute permission
        run: chmod +x mvnw

      - name: Resolve dependencies
        run: ./mvnw dependency:resolve-plugins dependency:resolve

      - name: Run integration tests
        run: ./mvnw verify -DskipUnitTests

  SonarQube-Scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    environment: env
    defaults:
      run:
        working-directory: Backend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1 
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' 
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=smartbin -Dsonar.projectName='smartbin'
  
  Trivy-Scan:
    name: Scan Docker-Compose Containers with Trivy
    runs-on: ubuntu-latest
    environment: env
    defaults:
      run:
        working-directory: Backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          docker-compose up -d

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Scan running containers with Trivy
        run: |
          OUTPUT_FILE="trivy_scan_results.txt"
          echo "Trivy Scan Results" > "$OUTPUT_FILE"

          # Lấy danh sách các container đang chạy
          CONTAINERS=$(docker ps --format "{{.Image}}")

          for IMAGE in $CONTAINERS; do
            echo "Scanning image: $IMAGE" | tee -a "$OUTPUT_FILE"
            trivy image --severity CRITICAL,HIGH,MEDIUM --ignore-unfixed "$IMAGE" | tee -a "$OUTPUT_FILE"
          done

          echo "Trivy scan completed. Results saved in $OUTPUT_FILE"

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results
          path: trivy_scan_results.txt